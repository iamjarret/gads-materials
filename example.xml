<?xml version="1.0"?>
<presentation>
	<info company="Data Science" logo="ga-logo.png"/>
	
	<title title= "Teaching Python to Play Chess" date="August 17th, 2014" people="Jarret Petrillo, jarret.petrillo@gmail.com"/>

	<section name="If you can't solve a problem, there is an easier problem you can solve: find it - George Polya"/>

	<section name="How to get Python to play chess?"/>

	<slide title="Solution 1: Statistical approach">
		<p>Download sci-kit learn</p>
		<p>Categorize positions according to king safety, pawn structure, and development</p>
		<p>Develop a choice model</p>
		<p>Use historical games by grand masters to callibrate model parameters</p>
		<p>Too complicated</p>
	</slide>

	<slide title="Solution 2: Class-based approach">
		<p>Define a chess board as an 8x8 grid</p>
		<p>Implement a generic piece class</p>
		<p>Subclass the piece class to include rules for how each moves</p>
		<p>A chess game would then be a board and a collection of pieces</p>
		<p>A move would take one piece and place it somewhere else</p>
		<p>Still too complicated</p>
	</slide>

	<section name="The bully heurestic"/>

	<slide title="Presentation overview">
		<p>Develop ease of use as a worthy project goal</p>
		<p>Describe bully heurestic as one type of solution</p>
		<p>Walk through pystockfish as an example of this approach in action</p>
	</slide>

	<section name="Has anyone published a package?"/>

	<slide title="Pystockfish takes a package and makes doing one task easier">
		<p>Pystockfish builds off a class from the subprocess package</p>
		<p>Subprocess allows python to work with the input/output from a subroutine</p>
		<p>Stockfish runs at the terminal level</p>
	</slide>

	<codeslide title="Good classes in action">
		<codeblock>
			<l>from flask import Flask</l>
			<l> </l>
			<l focus="1">app = Flask(__name__)</l>
			<l> </l>
			<l focus="1">app.config['DEBUG']=True</l>
			<l> </l>
			<l>if __name__ == '__main__':</l>
			<l focus="1" indent="1">app.run()</l>
		</codeblock>
	</codeslide>

	<codeslide title="More good classes in action">
		<codeblock>
			<l>from webapp import db</l>
			<l>from models import User</l>
			<l> </l>
			<l>u = User(name="Jarret")</l>
			<l> </l>
			<l focus="1">db.session.add(u)</l>
			<l focus="1">db.session.commit()</l>
		</codeblock>
	</codeslide>

	<slide title="Ease of use hides complexity">
		<p>Underneath the hood the sqlalchemy session object interacts with SQL</p>
		<p>Stores variables in a temporary state</p>
		<p>Saves objects to permanent database</p>
		<p>Handles synchronous requests</p>
	</slide>

	<section name="Ease of use is progress"/>

	<section name="Question of thinking depth motivated Pystockfish"/>

	<slide title="Pystockfish problem statement">
		<p>Take two instances of the stockfish engine</p>
		<p>Set them to different thinking depths</p>
		<p>Have them play</p>
		<p>Record result</p>
		<p>Repeat</p>
	</slide>

	<slide title="Programming problem statement">
		<p>Create two instances of the stockfish engine</p>
		<p>Set parameters</p>
		<p>Translate parameters into the language of stockfish</p>
		<p>Make a match between the two engines</p>
		<p>Have the first engine make a move</p>
		<p>Translate move into the language of stockfish and have the second engine move</p>
		<p>Repeat until one side wins or game is drawn</p>
		<p>Repeat with multiple engines</p>
	</slide>

	<codeslide title="How to use stockfish from the terminal">
		<codeblock>
			<l focus="1">>>stockfish</l>
			<l>Stockfish 120212 by Tord Romstad, Marco Costalba, and Joona Kiiski</l>
			<l focus="1">ucinewgame</l>
			<l focus="1">position startpos moves e2e4 e7e5</l>
			<l focus="1">go depth 15</l>
			<l>info depth 1 seldepth 1 score cp 64 nodes 59 nps 2185 time 27 multipv 1 pv b1c3</l>
			<l>info depth 2 seldepth 2 score cp 12 nodes 298 nps 11037 time 27 multipv 1 pv b1c3 b8c6</l>
			<l>...</l>
			<l>info depth 15 seldepth 22 score cp 56 nodes 1608006 nps 1472532 time 1092 multipv g1f3...</l>
			<l>bestmove g1f3 ponder g8f6</l>
		</codeblock>
	</codeslide>


	<codeslide title="End use case">
		<codeblock>
			<l>>>from pystockfish import Engine</l>
			<l focus="1">>>deepthinker = Engine(depth=15)</l>
			<l focus="1">>>deepthinker.setposition(['e2e4','e7e5'])</l>
			<l focus="1">>>deepthinker.bestmove()</l>
			<l>'g1f3'</l>
		</codeblock>
	</codeslide>

	<slide title="Challenges">
		<p>Stockfish understands only UCI protocol - TRANSLATION</p>
		<p>Bestmove function is not instantenous - SYNCHRONY</p>
		<p>Commands submitted in python but processed in terminal - STATE EQUALITY</p>
	</slide>

	<codeslide title="Wrapping subprocess">
		<codeblock>
			<l>import subprocess</l>
			<l> </l>
			<l focus="1">class Engine(subprocess.Popen):</l>
			<l> </l>
			<l indent="1">def __init__(self, depth):</l>
			<l indent="2">subprocess.Popen.__init__(self, </l>
			<l focus="1" indent="3">'stockfish',</l>
			<l indent="3">universal_newlines=True,</l>
			<l indent="3">stdin=subprocess.PIPE,</l>
			<l indent="3">stdout=subprocess.PIPE)</l>
			<l> </l>
			<l focus="1" indent="2">self.depth = depth</l>
		</codeblock>
	</codeslide>

	<codeslide title="Put function">
		<codeblock>
			<l focus="1">def put(self, command):</l>
			<l focus="1" indent="1">self.stdin.write(command+'\n')</l>
		</codeblock>
	</codeslide>

	<codeslide title="Isready function and the put/until model">
		<codeblock>
			<l focus="1">def isready(self):</l>
			<l focus="1" indent="1">self.put('isready')</l>
			<l indent="1">last_line=''</l>
			<l indent="1">while True:</l>
			<l indent="2">text=self.stdout.readline().strip()</l>
			<l focus="1" indent="2">if text=='readyok':</l>
			<l focus="1" indent="3">return lastline</l>
			<l indent="2">lastline=text</l>
		</codeblock>
	</codeslide>

	<codeslide title="Building more complex functions">
		<codeblock>
			<l focus="1">def newgame(self):</l>
			<l indent="1" focus="1">self.put("ucinewgame")</l>
			<l indent="1" focus="1">self.isready()</l>
		</codeblock>
		<codeblock>
			<l focus="1">def setposition(self, moves=[]):</l>
			<l indent="1">moveString=self._movelisttostr(moves)</l>
			<l indent="1" focus="1">self.put("position startpos moves %s" % moveString)</l>
			<l indent="1" focus="1">self.isready()</l>
		</codeblock>
	</codeslide>

	<codeslide title="Bestmove function using the put/until model">
		<codeblock>
			<l>def bestmove(self):</l>
			<l indent="1">last_line = ""</l>
			<l indent="1" focus="1">self.put('go depth %s'%self.depth)</l>
			<l indent="1">while True:</l>
			<l indent="2">text = self.stdout.readline().strip()</l>
			<l indent="2">split_text = text.split(' ')</l>
			<l indent="2" focus="1">if split_text[0]=='bestmove':</l>
			<l indent="3" focus="1">return {'move': split_text[1],</l>
			<l indent="3" focus="1">'ponder': split_text[3],</l>
			<l indent="3" focus="1">'info': last_line</l>
			<l indent="3" focus="1">}</l>
			<l indent="2">last_line = text</l>
		</codeblock>
	</codeslide>

	<imageslide title="Put something where those who need it can find it" image="ga-logo.png"/>

	<section name="Publishing your work"/>

	<slide title="If it's not easy to find it doesn't exist">
		<p>PyPI is one-stop pacakge repository</p>
		<p>Makes distribution straightforward using setuptools</p>
		<p>Allows users to install software with pip command</p>
		<p>Creates a weblink that can be shared</p>
	</slide>

	<slide title="Innovation one small step at a time">
		<p>A problem solved makes room for the next one</p>
		<p>Making it easier to do something is an achievement</p>
		<p>If it's public others can build off it</p>
	</slide> 

	<section name="Thank you"/>

</presentation>
